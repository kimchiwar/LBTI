{"cells":[{"cell_type":"code","source":["# selenium 설치 및 세팅\n","!pip install selenium\n","!apt-get update\n","!apt install chromium-chromedriver\n","!cp /usr/lib/chromium-browser/chromedriver /usr/bin"],"metadata":{"id":"MUF5ifZUYDp0"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sgxz4nNIlFwR"},"outputs":[],"source":["from typing_extensions import ParamSpecArgs\n","import requests\n","from urllib import parse\n","import pprint,time\n","import random as ran\n","import matplotlib.pyplot as plt\n","from sklearn import linear_model\n","import numpy as np\n","import pandas as pd\n","from selenium import webdriver\n","from selenium.webdriver.common.by import By\n","\n","pp = pprint.PrettyPrinter(indent=4)\n","api_key = \"RGAPI-baca2772-4e7e-45a3-b50f-b3a6bb5723fd\" #실행할 때 필요한 api 키\n","request_header = {\n","                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36\",\n","                    \"Accept-Language\": \"ko,en-US;q=0.9,en;q=0.8,es;q=0.7\",\n","                    \"Accept-Charset\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n","                    \"Origin\": \"https://developer.riotgames.com\",\n","                    \"X-Riot-Token\": api_key\n","                }\n","#LBTI 정보\n","LBTI = {\n","    \"AMCU\" : \"공격 주류 캐리 사고  →적은 게임을 하면서도 싸움에 호전적인 당신은 메타에 어울려 팀을 승리로 이끄시는 군요.\",\n","    \"AMCF\" : \"공격 주류 캐리 집중 → 많은 게임을 하면서도 싸움에 호전적인 당신은 핵심빌드로 팀을 승리로 이끄시는군요,\",\n","    \"ACSU\" : \"공격 주류 서폿 사고 → 적은 게임을 하면서도 공격적인 스타일의 당신은 핵심빌드로 팀의 승리를 도우시는군요.\",\n","    \"ACSF\" : \"공격 주류 서폿 집중 → 많은 게임을 하면서도 공격적인 스타일의 당신은 팀을 도와서 승리를 이끄시는군요.\",\n","    \"AOSU\" : \"공격 독창 서폿 사고 → 적은 게임을 하면서도 싸움에 호전적인 당신은 새로운 메타를 이용하여 팀의 승리를 도우시는군요.\",\n","    \"AOSF\" : \"공격 독창 서폿 집중 → 많은 게임을 하면서도 싸움에 호전적인 당신은 새로운 메타를 이용하여 팀의 승리를 도우시는군요.\",\n","    \"AOCU\" : \"공격 독창 캐리 사고 → 적은 게임을 하면서도 공격적인 당신은 새로운 메타를 이용하여 팀의 승리를 이끄시는군요.\",\n","    \"AOCF\" : \"공격 독창 캐리 집중 → 많은 게임을 하면서도 공격적인 스타일의 당신은 새로운 메타를 창조하여 팀의 승리를 이끄시는군요.\",\n","    \"DMCU\" : \"수비 주류 캐리 사고 → 적은 게임을 하면서도 안정적인 스타일의 당신은 핵심빌드를 사용하여 팀의 승리를 이끄시는군요.\",\n","    \"DMCF\" : \"수비 주류 캐리 집중 → 많은 게임을 하면서도 안정적인 스타일의 당신은 핵심빌드를 사용하여 팀의 승리를 이끄시는군요.\",\n","    \"DMSU\" : \"수비 주류 서폿 사고 → 적은 게임을 하면서도 안정적인 스타일의 당신은 핵심빌드를 사용하여 팀의 승리를 도우시는군요.\",\n","    \"DMSF\" : \"수비 주류 서폿 집중 → 많은 게임을 하면서도 안전추구형인 당신은 핵심빌드를 사용하여 팀의 승리를 도우시는군요.\",\n","    \"DOSU\" : \"수비 독창 서폿 사고 → 적은 게임을 하면서도 안정적인 스타일의 당신은 새로운 메타를 창조하여 이타적인 플레이로 팀의 승리를 도우시는군요.\",\n","    \"DOSF\" : \"수비 독창 서폿 집중 → 많은 게임을 하면서도 안정적인 스타일의 당신은 새로운 메타를 창조하여 이타적인 플레이로 팀의 승리를 도우시는군요.\",\n","    \"DOCU\" : \"수비 독창 캐리 사고 → 적은 게임을하면서도 안정적인 플레이 스타일의 당신은 새로운 메타를 이용하여 자신의 성량으로 팀의 승리를 이끄시는군요.\",\n","    \"INTJ\" : \"수비 독창 캐리 집중 → 많은 게임을 하면서도 안정적인 플레이 스타일의 당신은 새로운 메타를 창조하여 팀의 승리를 이끄시는군요.\"}\n","\n","#소한사 이름으로 정보 가져오기\n","def summoner_v4_by_summoner_name(summonerName):\n","    encodingSummonerName = parse.quote(summonerName)\n","    url = f\"https://kr.api.riotgames.com/lol/summoner/v4/summoners/by-name/{encodingSummonerName}\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def league_v4_queue_tier_division(queue, tier, division, page_number):\n","    if division == 1 or tier in [\"CHALLENGER\", \"GRANDMASTER\", \"MASTER\"]:\n","        division = 'I'\n","    elif division == 2 :\n","        division = 'II'\n","    elif division == 3 :\n","        division = 'III'\n","    elif division == 4:\n","        division = 'IV'\n","    if queue == \"solo\" :\n","        queue = \"RANKED_SOLO_5x5\"\n","    elif queue == \"free\" :\n","        queue = \"RANKED_FLEX_SR\"\n","    url = f\"https://kr.api.riotgames.com/lol/league-exp/v4/entries/{queue}/{tier}/{division}?page={page_number}\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def league_Exp(queue,tier,division):\n","  url = f\"https://kr.api.riotgames.com/lol/league-exp/v4/entries/{queue}/{tier}/{division}\"\n","  return requests.get(url, headers=request_header).json()\n","\n","def match_v5_get_list_match_id(puuid, start, count):\n","    url = f\"https://asia.api.riotgames.com/lol/match/v5/matches/by-puuid/{puuid}/ids?start={start}&count={count}\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def match_v5_get_match_history(matchId):\n","    url = f\"https://asia.api.riotgames.com/lol/match/v5/matches/{matchId}\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def match_v5_get_match_timeline(matchId):\n","    url = f\"https://asia.api.riotgames.com/lol/match/v5/matches/{matchId}/timeline\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def find_items():\n","    url = f\"http://ddragon.leagueoflegends.com/cdn/12.15.1/data/en_US/item.json\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def champions():\n","    url = f\"http://ddragon.leagueoflegends.com/cdn/11.3.1/data/ko_KR/champion.json\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def champion_mastery(encryptedSummonerId):\n","    url = f\"https://kr.api.riotgames.com/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}\"\n","    return requests.get(url, headers=request_header).json()\n","\n","def match_data(i):\n","  return match_v5_get_match_history(i)\n","\n","def item_name(num):\n","  try:\n","    return find_items()[\"data\"][num][\"name\"]\n","  except:\n","    pass\n","\n","def get_kda(i,j):\n","  try:\n","    return round((i[\"info\"][\"participants\"][j][\"kills\"] + i[\"info\"][\"participants\"][j][\"assists\"]), 2)\n","    # / i[\"info\"][\"participants\"][j][\"deaths\"]\n","  except:\n","    return (i[\"info\"][\"participants\"][j][\"kills\"] + i[\"info\"][\"participants\"][j][\"assists\"])\n","\n","def get_damageDealtToTurrets(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"damageDealtToTurrets\"]\n","  except:\n","    pass\n","\n","def get_totalDamageDealtToChampions(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]\n","  except:\n","    pass\n","\n","def get_totalDamageTaken(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"totalDamageTaken\"]\n","  except:\n","    pass\n","\n","def get_teamPosition(i,j):\n","  try:\n","    a = i[\"info\"][\"participants\"][j][\"teamPosition\"]\n","    if a == \"BOTTOM\":\n","      a = \"adc\"\n","    if a == \"UTILITY\":\n","      a = \"support\"\n","    if a == \"MIDDLE\":\n","      a = \"mid\"\n","    return a.lower()\n","  except:\n","    pass\n","\n","def get_wardsPlaced(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"wardsPlaced\"]\n","  except:\n","    pass\n","\n","def get_wardsKilled(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"wardsKilled\"]\n","  except:\n","    pass\n","\n","def get_goldEarned(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"goldEarned\"]\n","  except:\n","    pass\n","\n","def get_visionScore(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"visionScore\"]\n","  except:\n","    pass\n","\n","def get_totalMinionsKilled(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"totalMinionsKilled\"]\n","  except:\n","    pass\n","\n","def get_championName(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"championName\"]\n","  except:\n","    pass\n","\n","def get_role(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"role\"]\n","  except:\n","    pass\n","\n","def get_challenges(i,j):\n","  try:\n","    return i[\"info\"][\"participants\"][j][\"challenges\"]\n","  except:\n","    pass\n","\n","def get_game_date(i):\n","  try:\n","    return i[\"info\"][\"gameCreation\"]\n","  except:\n","    pass\n","\n","def convert_datetime(unixtime):\n","   import datetime\n","   date = datetime.datetime.fromtimestamp(unixtime//1000).strftime('%Y%m%d')\n","   return int(date) # format : str\n","\n","def get_game_time(i):\n","  try:\n","    return i[\"info\"][\"gameDuration\"]\n","  except:\n","    pass\n","\n","def get_played_date(k,v):\n","  s = set()\n","  for i in v:\n","    s.add(convert_datetime(i))\n","  return int(len(s))\n"]},{"cell_type":"code","source":["get_played_date"],"metadata":{"id":"9bObGw0hHw1P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 아이언~다이아 정보 가져오기 칼바람 : 'ARAM'  협곡 : 'CLASSIC'\n","tier = [\"BRONZE\",\"SILVER\",\"GOLD\",\"PLATINUM\",\"DIAMOND\"]\n","summoner_name = [] #SummonerName 보관\n","summoner_puuid = [] #SummonerPuuid 보관\n","m_d = [] # MatchData 보관\n","X = []\n","y = []\n","for i in tier:\n","  league_info = league_v4_queue_tier_division(\"solo\",i,1,1)\n","  for j in range(10):\n","    summoner_name.append(league_info[j][\"summonerName\"])\n","for i in summoner_name:\n","  try:\n","    summoner_puuid.append(summoner_v4_by_summoner_name(i)[\"puuid\"])\n","  except:\n","    pass\n","\n","#time_pd = pd.DataFrame([[summoner_name],[summoner_puuid]])\n","#time_pd.to_csv(\"filename.csv\")\n"],"metadata":{"id":"cP9TdiU6rMTr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Oy_tg9bDxwqb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["m_d = []\n","for i in summoner_puuid:\n","  for j in match_v5_get_list_match_id(i,0,1):\n","    try:\n","      m_d.append(match_data(j))\n","    except:\n","      pass"],"metadata":{"id":"z4LgVdfrNurj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["m_d_d = {}\n","for i in summoner_puuid:\n","  asd = []\n","  for j in match_v5_get_list_match_id(i,0,10):\n","    try:\n","      s = match_data(j)[\"info\"][\"gameCreation\"]\n","      asd.append(s)\n","      m_d_d[i] = asd\n","    except:\n","      time.sleep(1)\n","      pass\n"],"metadata":{"id":"UOEEOprwSSSX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import csv\n","\n","top_rate = {}\n","jungle_rate = {}\n","mid_rate = {}\n","adc_rate = {}\n","support_rate = {}\n","\n","with open('top.csv', mode='r') as inp:\n","    reader = csv.reader(inp)\n","    top_rate = {rows[0]:rows[1] for rows in reader}\n","with open('jungle.csv', mode='r') as inp:\n","    reader = csv.reader(inp)\n","    jungle_rate = {rows[0]:rows[1] for rows in reader}\n","with open('mid.csv', mode='r') as inp:\n","    reader = csv.reader(inp)\n","    mid_rate = {rows[0]:rows[1] for rows in reader}\n","with open('adc.csv', mode='r') as inp:\n","    reader = csv.reader(inp)\n","    adc_rate = {rows[0]:rows[1] for rows in reader}\n","with open('support.csv', mode='r') as inp:\n","    reader = csv.reader(inp)\n","    support_rate = {rows[0]:rows[1] for rows in reader}"],"metadata":{"id":"hrPAwtjoOaQ8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["match_data_person = []\n","match_data_person_data = {}\n","X_AD_S = 0\n","y_AD_S = 0\n","X_CS_S = 0\n","y_CS_S = 0\n","pick_rate = 0\n","aasd = []\n","name = input()\n","puuid = summoner_v4_by_summoner_name(name)[\"puuid\"]\n","for i in match_v5_get_list_match_id(puuid,0,10):\n","  match_data_person.append(match_data(i))\n","\n","for i in match_v5_get_list_match_id(puuid,0,10):\n","  ss = match_data(i)[\"info\"][\"gameCreation\"]\n","  aasd.append(ss)\n","  match_data_person_data[i] = aasd\n","\n","# 공격/수비 형 확인하기\n","for i in match_data_person:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for j in range(10):\n","      if i[\"info\"][\"participants\"][j][\"summonerName\"] == name:\n","        if get_teamPosition(i,j) == \"top\" or get_teamPosition(i,j) == \"mid\":\n","          X_AD_S += (round((i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]*0.00005) + (i[\"info\"][\"participants\"][j][\"damageDealtToTurrets\"]*0.0002) - (i[\"info\"][\"participants\"][j][\"challenges\"][\"killsUnderOwnTurret\"]*0.05) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"soloKills\"]*0.05),2))\n","          y_AD_S += (round(get_kda(i,j)*0.1,2))\n","        elif get_teamPosition(i,j) == \"jungle\":\n","          X_AD_S += (round((i[\"info\"][\"participants\"][j][\"challenges\"][\"enemyJungleMonsterKills\"]*0.002) + (i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]*0.00005) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"killsNearEnemyTurret\"]*0.08),2))\n","          y_AD_S += (round(get_kda(i,j)*0.1,2))\n","        elif get_teamPosition(i,j) == \"adc\":\n","          X_AD_S += (round((i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]*0.00003) + (i[\"info\"][\"participants\"][j][\"damageDealtToTurrets\"]*0.00015) - (i[\"info\"][\"participants\"][j][\"challenges\"][\"killsUnderOwnTurret\"]*0.05) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"soloKills\"]*0.05),2))\n","          y_AD_S += (round(get_kda(i,j)*0.1,2))\n","        elif get_teamPosition(i,j) == \"support\":\n","          X_AD_S += (round((i[\"info\"][\"participants\"][j][\"challenges\"][\"killsNearEnemyTurret\"]*0.08) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"immobilizeAndKillWithAlly\"]*0.15) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"enemyChampionImmobilizations\"]*0.025),2))\n","          y_AD_S += (round(get_kda(i,j)*0.1,2))\n","        else:\n","          print(\"!!!\")\n","\n","if ((X_AD_S * 0.37099859) + 0.7918840107994379) < y_AD_S:\n","  attack = \"A\"\n","else:\n","  attack = \"D\"\n","#캐리/서포팅 형 확인하기\n","for i in match_data_person:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for j in range(10):\n","      if i[\"info\"][\"participants\"][j][\"summonerName\"] == name:\n","        if get_teamPosition(i,j) == \"top\" or get_teamPosition(i,j) == \"mid\" or get_teamPosition(i,j) == \"adc\":\n","          X_CS_S += (round((i[\"info\"][\"participants\"][j][\"totalMinionsKilled\"]*0.006) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"turretPlatesTaken\"]*0.33) - (i[\"info\"][\"participants\"][j][\"challenges\"][\"teamDamagePercentage\"]*3.3) + (i[\"info\"][\"participants\"][j][\"bountyLevel\"]*0.33),2))\n","          y_CS_S += (round(get_game_time(i)*ran.uniform(0.006,0.007),2))\n","        elif get_teamPosition(i,j) == \"jungle\":\n","          X_CS_S += (round((i[\"info\"][\"participants\"][j][\"challenges\"][\"dragonTakedowns\"]*0.4) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"turretsTakenWithRiftHerald\"]*0.5) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"riftHeraldTakedowns\"]*0.5) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"enemyJungleMonsterKills\"]*0.08) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"alliedJungleMonsterKills\"]*0.01),2))\n","          y_CS_S += (round(get_game_time(i)*ran.uniform(0.006,0.007),2))\n","        elif get_teamPosition(i,j) == \"support\":\n","          X_CS_S += (round((i[\"info\"][\"participants\"][j][\"visionScore\"]*0.06) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"controlWardsPlaced\"]*0.08) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"immobilizeAndKillWithAlly\"]*0.15) + (get_kda(i,j))*0.05,2))\n","          y_CS_S += (round(get_game_time(i)*ran.uniform(0.006,0.007),2))\n","        else:\n","          print(\"!!!\")\n","\n","if ((X_CS_S * 0.40742171) + 9.273571763019241) < y_CS_S:\n","  carry = \"C\"\n","else:\n","  carry = \"S\"\n","#주류/독창 형 확인하기\n","for i in match_data_person:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for j in range(10):\n","      if get_teamPosition(i,j) == \"top\":\n","        for k,v in top_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            pick_rate += round(float(v)*10,1)\n","      elif get_teamPosition(i,j) == \"jungle\":\n","        for k,v in jungle_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            pick_rate += round(float(v)*8,1)\n","      elif get_teamPosition(i,j) == \"mid\":\n","        for k,v in mid_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            pick_rate += round(float(v)*8,1)\n","      elif get_teamPosition(i,j) == \"adc\":\n","        for k,v in adc_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            pick_rate += round(float(v)*5,1)\n","      elif get_teamPosition(i,j) == \"support\":\n","        for k,v in support_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            pick_rate += round(float(v)*9,1)\n","      else:\n","        print(\"!!!\")\n","if pick_rate >= 55:\n","  major = \"M\"\n","else:\n","  major = \"O\"\n","#다수/집중 형 확인하기\n","propensity = \"\"\n","for i in match_data_person:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for k,v in match_data_person_data.items():\n","      if  get_played_date(k,v) < 3:\n","        propensity = \"F\"\n","      elif get_played_date(k,v) == 3 or get_played_date(k,v) > 3:\n","        propensity = \"U\"\n","\n","print(\"당신의 LBTI는: \",attack + major + carry + propensity, \"입니다.\")\n","print(attack + major + carry + propensity, \":\",LBTI[attack + major + carry + propensity])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"th4-aVuN6JeN","executionInfo":{"status":"ok","timestamp":1660798049151,"user_tz":-540,"elapsed":21084,"user":{"displayName":"강우협","userId":"04972175977086628088"}},"outputId":"d86ae434-2701-4109-a48a-53bafb68acce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["땅콩슈크림\n","!!!\n","당신의 LBTI는:  AOCU 입니다.\n","AOCU : 공격 독창 캐리 사고 → 적은 게임을 하면서도 공격적인 당신은 새로운 메타를 이용하여 팀의 승리를 이끄시는군요.\n"]}]},{"cell_type":"code","source":["pp.pprint(match_data_person[0])"],"metadata":{"id":"WiPF_pai8egY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#공격/ 수비형 확인 ing\n","X_X_A_D = []\n","X_A_D = []\n","y_A_D = []\n","for i in m_d:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for j in range(10):\n","      if get_teamPosition(i,j) == \"top\" or get_teamPosition(i,j) == \"mid\":\n","        X_X_A_D.append(round((i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]*0.00005) + (i[\"info\"][\"participants\"][j][\"damageDealtToTurrets\"]*0.0002) - (i[\"info\"][\"participants\"][j][\"challenges\"][\"killsUnderOwnTurret\"]*0.05) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"soloKills\"]*0.05),2))\n","        y_A_D.append(round(get_kda(i,j)*0.1,2))\n","      elif get_teamPosition(i,j) == \"jungle\":\n","        X_X_A_D.append(round((i[\"info\"][\"participants\"][j][\"challenges\"][\"enemyJungleMonsterKills\"]*0.002) + (i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]*0.00005) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"killsNearEnemyTurret\"]*0.08),2))\n","        y_A_D.append(round(get_kda(i,j)*0.1,2))\n","      elif get_teamPosition(i,j) == \"adc\":\n","        X_X_A_D.append(round((i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]*0.00003) + (i[\"info\"][\"participants\"][j][\"damageDealtToTurrets\"]*0.00015) - (i[\"info\"][\"participants\"][j][\"challenges\"][\"killsUnderOwnTurret\"]*0.05) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"soloKills\"]*0.05),2))\n","        y_A_D.append(round(get_kda(i,j)*0.1,2))\n","      elif get_teamPosition(i,j) == \"support\":\n","        X_X_A_D.append(round((i[\"info\"][\"participants\"][j][\"challenges\"][\"killsNearEnemyTurret\"]*0.08) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"immobilizeAndKillWithAlly\"]*0.15) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"enemyChampionImmobilizations\"]*0.025),2))\n","        y_A_D.append(round(get_kda(i,j)*0.1,2))\n","      else:\n","        print(\"!!!\")\n","print(X_X_A_D)\n","print(y_A_D)\n","X_X_A_D.remove(max(X_X_A_D))\n","X_X_A_D.remove(min(X_X_A_D))\n","y_A_D.remove(max(y_A_D))\n","y_A_D.remove(min(y_A_D))\n","for i in X_X_A_D:\n","  X_A_D.append([i])\n","\n","\n"],"metadata":{"id":"OrKdfGgXQ_ob"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#캐리/서폿팅 확인 ing\n","X_X_C_S = []\n","X_C_S = []\n","y_C_S = []\n","for i in m_d:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for j in range(10):\n","      if get_teamPosition(i,j) == \"top\" or get_teamPosition(i,j) == \"mid\" or get_teamPosition(i,j) == \"adc\":\n","        X_X_C_S.append(round((i[\"info\"][\"participants\"][j][\"totalDamageDealtToChampions\"]*0.00005) + (i[\"info\"][\"participants\"][j][\"damageDealtToTurrets\"]*0.0002) - (i[\"info\"][\"participants\"][j][\"challenges\"][\"killsUnderOwnTurret\"]*0.05) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"soloKills\"]*0.05),2))\n","        y_C_S.append(round(get_game_time(i)*ran.uniform(0.006,0.007),2))\n","      elif get_teamPosition(i,j) == \"jungle\":\n","        X_X_C_S.append(round((i[\"info\"][\"participants\"][j][\"challenges\"][\"dragonTakedowns\"]*0.4) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"turretsTakenWithRiftHerald\"]*0.5) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"riftHeraldTakedowns\"]*0.5) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"enemyJungleMonsterKills\"]*0.08) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"alliedJungleMonsterKills\"]*0.01),2))\n","        y_C_S.append(round(get_game_time(i)*ran.uniform(0.006,0.007),2))\n","      elif get_teamPosition(i,j) == \"support\":\n","        X_X_C_S.append(round((i[\"info\"][\"participants\"][j][\"visionScore\"]*0.06) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"controlWardsPlaced\"]*0.08) + (i[\"info\"][\"participants\"][j][\"challenges\"][\"immobilizeAndKillWithAlly\"]*0.15) + (get_kda(i,j))*0.05,2))\n","        y_C_S.append(round(get_game_time(i)*ran.uniform(0.006,0.007),2))\n","      else:\n","        print(\"!!!\")\n","print(X_X_C_S)\n","print(y_C_S)\n","X_X_C_S.remove(max(X_X_C_S))\n","X_X_C_S.remove(min(X_X_C_S))\n","y_C_S.remove(max(y_C_S))\n","y_C_S.remove(min(y_C_S))\n","for i in X_X_C_S:\n","  X_C_S.append([i])"],"metadata":{"id":"x0OLFf1YgFbq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660793070741,"user_tz":-540,"elapsed":5,"user":{"displayName":"강우협","userId":"04972175977086628088"}},"outputId":"1f7cc797-4c31-48a7-9795-889dba609afa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["!!!\n","[2.88, 0.81, 1.33, 1.52, 5.87, 2.91, 4.08, 3.57, 1.92, 7.31, 1.86, 3.53, 1.07, 1.82, 0.51, 3.28, 0.52, 1.59, 1.26, 1.69, 0.88, 4.95, 0.84, 1.23, 5.21, 0.99, 1.63, 0.53, 0.32, 2.43, 1.36, 2.34, 1.98, 1.46, 5.44, 4.16, 2.47, 2.06, 4.27, 2.56, 1.59, 6.71, 1.39, 4.18, 9.14, 1.38, 0.58, 0.47, 3.15, 1.05, 2.08, 1.76, 7.75, 3.23, 4.58, 2.66, 2.09, 4.6, 2.08, 4.85, 1.1, 8.46, 1.82, 0.62, 3.05, 1.4, 1.73, 0.8, 1.03, 2.22, 0.88, 2.09, 1.94, 3.65, 6.17, 4.61, 4.83, 1.5, 0.66, 4.68, 1.66, 4.72, 3.32, 3.07, 6.34, 2.8, 1.71, 3.53, 1.39, 7.07, 1.46, 1.78, 2.06, 4.05, 5.83, 1.28, 3.14, 4.26, 1.27, 7.62, 1.52, 6.47, 8.05, 2.5, 4.98, 0.75, 0.44, 0.78, 1.23, 3.3, 0.59, 1.15, 0.46, 0.67, 3.61, 1.49, 9.84, 2.05, 2.58, 7.73, 2.35, 2.11, 4.14, 6.92, 0.98, 2.0, 2.19, 1.04, 5.37, 1.36, 1.08, 3.02, 2.2, 1.8, 4.46, 1.57, 5.69, 1.6, 1.32, 5.15, 1.92, 2.86, 1.34, 0.81, 5.12, 1.39, 2.38, 1.15, 1.45, 5.75, 0.77, 0.72, 1.5, 0.85, 2.21, 1.13, 0.84, 1.41, 0.43, 2.02, 1.77, 2.17, 2.21, 6.44, 2.85, 4.8, 5.1, 1.96, 7.62, 0.54, 0.85, 0.76, 1.05, 2.71, 1.68, 11.24, 1.33, 2.59, 4.38, 3.97, 5.14, 2.47, 1.03, 6.8, 2.25, 2.63, 2.0, 2.65, 8.87, 1.44, 2.19, 1.42, 1.03, 3.28, 2.83, 6.57, 0.94, 1.67, 7.39, 1.01, 5.78, 0.93, 2.16, 2.96, 0.26, 1.45, 0.84, 0.3, 1.11, 0.39, 0.82, 0.31, 0.23, 0.53, 0.81, 2.82, 0.67, 1.53, 3.52, 2.69, 4.64, 4.84, 3.89, 9.38, 3.49, 2.47, 2.76, 1.64, 7.16, 1.35, 3.66, 0.64, 0.33, 2.91, 0.66, 1.8, 0.48, 1.67, 4.58, 2.13, 0.9, 3.13, 2.73, 5.23, 3.41, 0.36, 1.67, 3.86, 0.95, 2.94, 9.03, 1.06, 1.69, 3.18, 0.31, 0.14, 0.37, 0.42, 1.52, 1.73, 3.22, 4.68, 2.13, 4.73, 1.25, 5.09, 1.15, 1.16, 3.46, 2.74, 1.42, 0.68, 5.04, 2.6, 1.35, 1.41, 0.51, 1.8, 3.17, 0.71, 3.91, 5.89, 2.13, 6.88, 1.45, 1.9, 3.96, 1.88, 0.41, 1.85, 3.39, 2.96, 3.9, 9.2, 3.39, 3.45, 1.47, 1.9, 9.56, 1.17, 4.76, 2.13, 2.66, 3.35, 0.71, 1.05, 0.62, 0.58, 0.33, 5.36, 0.85, 0.66, 1.47, 1.31, 2.88, 1.18, 4.72, 1.58, 2.96, 3.14, 10.37, 1.63, 1.54, 7.11, 1.02, 5.22, 1.85, 5.25, 9.64, 0.37, 1.11, 0.58, 0.44, 2.2, 0.9, 6.75, 0.96, 1.98, 3.5, 0.28, 0.54, 0.14, 0.18, 1.6, 0.74, 7.36, 1.75, 2.51, 2.52, 1.66, 1.9, 1.06, 2.39, 5.53, 2.99, 6.74, 1.7, 4.31, 2.04, 2.82, 0.67, 0.93, 2.78, 5.98, 1.99, 2.77, 2.24, 3.66, 7.74, 0.99, 5.37, 0.88, 2.24, 3.91, 0.77, 0.46, 0.39, 0.12, 0.64, 0.57, 2.02, 1.22, 0.4, 2.94, 1.87, 6.82, 1.36, 1.28, 5.4, 1.61, 4.91, 0.63, 1.81, 3.28, 0.31, 0.46, 0.39, 0.08, 1.13]\n","[14.88, 15.3, 14.71, 14.91, 13.48, 13.27, 14.97, 14.48, 13.52, 13.25, 8.17, 9.07, 8.17, 8.41, 8.62, 8.97, 8.51, 8.07, 8.91, 8.93, 7.28, 7.98, 7.53, 7.96, 8.14, 7.78, 8.15, 7.36, 7.47, 8.34, 11.29, 11.89, 12.0, 10.97, 11.44, 12.25, 10.67, 11.93, 11.09, 12.0, 9.99, 11.17, 10.05, 10.15, 11.3, 10.45, 10.78, 10.97, 11.15, 11.25, 16.75, 15.45, 14.98, 16.51, 16.1, 16.8, 16.81, 16.29, 14.76, 16.17, 7.46, 7.94, 7.49, 7.92, 7.83, 8.6, 8.64, 7.56, 7.61, 7.57, 12.62, 11.67, 12.53, 11.85, 12.23, 11.41, 12.21, 11.89, 11.16, 11.57, 15.15, 13.92, 14.35, 14.99, 14.94, 14.69, 14.73, 13.75, 13.32, 15.24, 12.13, 11.02, 11.69, 11.41, 12.24, 10.89, 11.2, 11.95, 10.86, 11.3, 8.93, 8.63, 8.59, 9.13, 9.26, 8.68, 8.59, 9.03, 8.86, 9.6, 10.85, 9.73, 9.52, 10.45, 9.97, 10.16, 9.47, 10.65, 9.5, 10.25, 12.95, 12.61, 13.49, 12.82, 12.95, 13.65, 13.6, 12.97, 12.28, 12.68, 12.02, 12.95, 13.18, 12.75, 12.24, 13.45, 11.8, 13.3, 13.22, 11.82, 10.06, 10.36, 10.1, 8.97, 10.14, 9.6, 9.06, 9.61, 10.0, 9.4, 6.65, 7.34, 6.62, 7.45, 6.77, 7.48, 7.1, 6.51, 7.43, 15.59, 13.98, 14.73, 13.56, 15.36, 13.88, 14.74, 13.53, 14.36, 13.66, 9.5, 9.71, 9.25, 9.63, 8.58, 9.9, 9.03, 9.53, 9.17, 8.65, 13.58, 12.55, 12.84, 12.88, 13.62, 13.03, 12.33, 14.2, 13.15, 13.26, 9.15, 9.88, 9.19, 9.38, 10.08, 10.01, 9.82, 9.59, 10.41, 9.59, 7.94, 7.31, 7.49, 7.36, 8.16, 7.5, 7.77, 7.56, 7.83, 7.76, 6.32, 6.45, 6.45, 6.14, 5.81, 6.27, 6.32, 6.42, 6.01, 6.15, 17.5, 16.49, 15.79, 17.32, 16.24, 16.91, 16.81, 16.98, 16.43, 15.77, 7.88, 7.23, 7.55, 7.66, 7.66, 8.02, 7.5, 7.83, 7.19, 7.7, 11.16, 11.51, 12.0, 11.17, 11.81, 12.06, 11.45, 11.78, 11.19, 10.54, 5.77, 5.93, 5.97, 5.76, 5.7, 5.38, 5.96, 5.93, 5.29, 6.03, 11.5, 11.23, 12.0, 10.83, 10.83, 11.9, 12.16, 11.73, 11.38, 12.21, 7.93, 8.06, 7.88, 8.76, 8.58, 8.36, 8.79, 7.99, 8.81, 8.44, 12.7, 11.98, 12.76, 12.67, 11.4, 11.98, 11.38, 12.57, 12.66, 12.04, 12.95, 14.41, 13.84, 13.93, 14.79, 14.8, 13.69, 14.56, 14.78, 14.71, 7.36, 7.58, 7.03, 6.88, 6.92, 6.82, 7.04, 7.01, 7.31, 7.02, 8.91, 9.21, 8.53, 9.07, 8.52, 9.04, 9.51, 8.78, 8.61, 9.0, 15.15, 13.42, 14.09, 14.5, 14.19, 14.84, 14.45, 14.04, 14.78, 13.64, 6.51, 5.68, 5.77, 6.05, 6.03, 5.72, 6.4, 5.8, 5.8, 5.92, 6.17, 6.37, 6.55, 6.08, 5.91, 6.31, 6.49, 5.89, 5.9, 6.48, 12.41, 12.26, 12.23, 12.69, 12.43, 13.4, 12.32, 13.89, 13.35, 13.53, 11.69, 12.4, 11.95, 10.92, 11.19, 12.44, 11.87, 11.55, 11.13, 12.02, 5.84, 6.32, 6.17, 5.88, 5.73, 6.52, 6.32, 6.57, 6.19, 5.97, 9.83, 9.7, 9.27, 10.09, 9.42, 10.75, 10.7, 9.39, 10.12, 10.26, 5.97, 6.42, 6.37, 6.48, 6.18, 6.1, 6.45, 6.04, 6.0, 5.66]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_MEloGQy4IyA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"REVcCL4SM9Xs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OwnJmp3S8lTv","executionInfo":{"status":"ok","timestamp":1660763868093,"user_tz":-540,"elapsed":27540,"user":{"displayName":"강우협","userId":"04972175977086628088"}},"outputId":"72e12ee4-8d35-4869-d877-af9252e23582"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["삼성갤럭시노트8\n","당신의 LBTI는:  AOCF 입니다.\n","AOCF : 공격 독창 캐리 집중 → 많은 게임을 하면서도 공격적인 스타일의 당신은 새로운 메타를 창조하여 팀의 승리를 이끄시는군요.\n"]}]},{"cell_type":"code","source":["#주류/독창 확인 ing\n","for i in m_d:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for j in range(10):\n","      if get_teamPosition(i,j) == \"top\":\n","        for k,v in top_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            print(k,round(float(v)*100,1))\n","      elif get_teamPosition(i,j) == \"jungle\":\n","        for k,v in jungle_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            print(k,round(float(v)*100,1))\n","      elif get_teamPosition(i,j) == \"mid\":\n","        for k,v in mid_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            print(k,round(float(v)*100,1))\n","      elif get_teamPosition(i,j) == \"adc\":\n","        for k,v in adc_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            print(k,round(float(v)*100,1))\n","      elif get_teamPosition(i,j) == \"support\":\n","        for k,v in support_rate.items():\n","          if k.lower() == i[\"info\"][\"participants\"][j][\"championName\"].lower():\n","            print(k,round(float(v)*100,1))\n","      else:\n","        print(\"!!!\")\n"],"metadata":{"id":"g4cRjwoygGA8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["path = '/content/'\n","df = pd.read_csv(path + \"adc.csv\")\n","df"],"metadata":{"id":"Kjw4ph1TQdjS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"f--meWhT2mIr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#다수/집중 확인 ing\n","propensity = \"\"\n","for i in m_d:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for k,v in m_d_d.items():\n","      if get_played_date(k,v) == 1:\n","        propensity = \"F\"\n","      elif get_played_date(k,v) == 2 or get_played_date(k,v) > 2:\n","        propensity = \"U\""],"metadata":{"id":"m0h5RG5PgGua"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3acAcyaxT7-p"},"outputs":[],"source":["# 아이언~챌린저 정보 가져오기 칼바람 : 'ARAM'  협곡 : 'CLASSIC'\n","if m_d[0][\"info\"]['gameMode'] == \"CLASSIC\":\n","  print(\"aa\")\n","for i in m_d:\n","  if i[\"info\"]['gameMode'] == \"CLASSIC\":\n","    for j in range(10):\n","      try:\n","        if get_teamPosition(i,j) == \"TOP\":\n","          X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","          y.append(get_time_played(i,j) * 0.0001)\n","\n","      except:\n","        pass\n","\n"]},{"cell_type":"code","source":["print(league_v4_queue_tier_division(\"solo\",\"BRONZE\",1,1)[0][\"summonerId\"])"],"metadata":{"id":"QDlnjrgcpQ0Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(m_d)\n","print(summoner_name)\n","for i in m_d:\n","  for v in summoner_name:\n","    for j in range(10):\n","      if i[\"info\"][\"participants\"][j][\"summonerName\"] == v:\n","        print(\"!!\")\n","      else:\n","        print(\"@@\")\n"],"metadata":{"id":"IVU_D6NRf2Ds"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jt-_0aauorxm"},"outputs":[],"source":["##Colab에선 웹브라우저 창이 뜨지 않으므로 별도 설정한다.\n","options = webdriver.ChromeOptions()\n","options.add_argument('--headless')        # Head-less 설정\n","options.add_argument('--no-sandbox')\n","options.add_argument('--disable-dev-shm-usage')\n","driver = webdriver.Chrome('chromedriver', options=options)\n","check = [\"top\",\"jungle\",\"mid\",\"adc\",\"support\"]\n","champion_name = []\n","position = []\n","a_dict = {}\n","for i in m_d:\n","  for v in summoner_name:\n","    for j in range(10):\n","      try:\n","        if i[\"info\"][\"participants\"][j][\"summonerName\"] == v:\n","          champion_name.append(get_championName(i,j))\n","          position.append(get_teamPosition(i,j))\n","          break\n","      except:\n","        pass\n","for i in range(len(champion_name)):\n","  a_dict[champion_name[i]] = position[i]\n","# top, jungle, mid, adc, support\n","#해당 url로 이동\n","for k,v in a_dict.items():\n","  print(k,v)\n","  try:\n","    if v in check:\n","      url = \"https://www.op.gg/champions/{}/{}/build?region=kr&tier=platinum_plus\".format(k,v)\n","      driver.get(url)\n","      update = driver.find_element(By.CSS_SELECTOR,'#content-header > div.css-e7rpoq.e8u7qho8 > div.inner > div:nth-child(1) > div.css-c3v1ys.ew1oorz7 > div:nth-child(2) > div.css-oxevym.ew1oorz4')\n","      print(update.text)\n","    else:\n","      print(\"협곡이 아닙니다\")\n","  except:\n","    pass"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YS8LHVa7orsa"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"65PL9DYsQI9j"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4460,"status":"ok","timestamp":1660701786926,"user":{"displayName":"강우협","userId":"04972175977086628088"},"user_tz":-540},"id":"-rWPUa-r4-g5","outputId":"c4a7add6-7d17-4043-99f7-131e796f4ed5"},"outputs":[{"output_type":"stream","name":"stdout","text":["VNarMfW9uOHh3QnZgGSdp0DU_iPiEBvec8WDsWSUtz9ZnoAPi3H8PgaGQVMVodN-cvzRIno-0iMqAA\n","uxRmLWowXhJGri3l0ybSR6cs3epvRr9Q7xYVDEwegBiMbA\n"]}],"source":["#날짜 구하기\n","a = summoner_v4_by_summoner_name(\"삼성갤럭시노트8\")[\"puuid\"] #소환사 고유코드(puuid) 받기\n","b = summoner_v4_by_summoner_name(\"삼성갤럭시노트8\")[\"id\"] #소환사 고유코드(puuid) 받기\n","count = 0\n","temp = 0\n","for i in match_v5_get_list_match_id(a,0,2):\n","  game_time = convert_datetime(match_v5_get_match_history(i)[\"info\"][\"gameStartTimestamp\"]//1000)\n","  temp += game_time\n","\n","print(a)\n","print(b)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17570,"status":"ok","timestamp":1660703432410,"user":{"displayName":"강우협","userId":"04972175977086628088"},"user_tz":-540},"id":"FsnW6xrMtHeb","outputId":"e15a2955-380d-43f0-adb8-02d469e75ad3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hextech Rocketbelt\n","Blasting Wand\n","Amplifying Tome\n","Dark Seal\n","Sorcerer's Shoes\n","Recurve Bow\n","Oracle Lens\n","1660650893426\n"]}],"source":["#아이템 정보 구하기\n","#summoner = input() #소환사 이름 받기\n","a = summoner_v4_by_summoner_name(\"삼성갤럭시노트8\")[\"puuid\"] #소환사 고유코드(puuid) 받기\n","for i in match_v5_get_list_match_id(a,2,1):\n","  for j in range(10):\n","    if match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"summonerName\"] == \"삼성갤럭시노트8\":\n","      print(item_name(str(match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"item0\"])))\n","      print(item_name(str(match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"item1\"])))\n","      print(item_name(str(match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"item2\"])))\n","      print(item_name(str(match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"item3\"])))\n","      print(item_name(str(match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"item4\"])))\n","      print(item_name(str(match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"item5\"])))\n","      print(item_name(str(match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"item6\"])))\n","      print(match_v5_get_match_history(i)[\"info\"][\"gameStartTimestamp\"])\n","\n","# 필요한거\n","# kda, 템, 챔프픽률,포탑피해, 챔프피해, 받은피해, 포지션, 와드박은수, 와드 부순수, 번 골드량, 와드 감지갯수, 시야점수,상대 정글 먹은횟수"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mhzsfXVM9P1K"},"outputs":[],"source":["summoner_puuid = []\n","X = []\n","y = []\n","for i in range(len(league_v4_queue_tier_division(\"solo\", \"PLATINUM\", 3, 3))):\n","  summoner_puuid.append(summoner_v4_by_summoner_name(league_v4_queue_tier_division(\"solo\", \"PLATINUM\", 3, 3)[i][\"summonerName\"])[\"puuid\"])\n","for k in summoner_puuid:\n","  for i in match_v5_get_list_match_id(k,0,1):\n","    for j in range(10):\n","      if match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"summonerName\"] == summoner_name:\n","        time.sleep(5)\n","        if get_teamPosition(i,j) == \"TOP\":\n","          X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","          y.append(get_time_played(i,j) * 0.0001)\n","        if get_teamPosition(i,j) == \"MIDDLE\":\n","          X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","          y.append(get_time_played(i,j) * 0.0001)\n","        if get_teamPosition(i,j) == \"JUNGLE\":\n","          X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","          y.append(get_time_played(i,j) * 0.0001)\n","        if get_teamPosition(i,j) == \"BOTTOM\":\n","          X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","          y.append(get_time_played(i,j) * 0.0001)\n","        if get_teamPosition(i,j) == \"UTILITY\":\n","          X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","          y.append(get_time_played(i,j) * 0.0001)\n","        time.sleep(5)\n","        break"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":317555,"status":"ok","timestamp":1660616845467,"user":{"displayName":"강우협","userId":"04972175977086628088"},"user_tz":-540},"id":"nkrYBr8PEACZ","outputId":"0e2efeb0-9016-4453-b5e7-5b28590a319e"},"outputs":[{"name":"stdout","output_type":"stream","text":["소환사 이름을 적어주세요 (ex: hide on bush)삼성갤럭시노트8\n","몇 경기를 분석할까요 경기수가 많아지면 분석시간이 길어지고 경기수가 적으면 정확도가 떨어집니다.(추천:10)10\n"]}],"source":["summoner_name = input(\"소환사 이름을 적어주세요 (ex: hide on bush)\")\n","a = summoner_v4_by_summoner_name(summoner_name)[\"puuid\"] #소환사 고유코드(puuid) 받기\n","X = []\n","y = []\n","for i in match_v5_get_list_match_id(a,0,10):\n","  for j in range(10):\n","    if match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"summonerName\"] == summoner_name:\n","      time.sleep(5)\n","      if get_teamPosition(i,j) == \"TOP\":\n","        X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","        y.append(get_time_played(i,j) * 0.0001)\n","      if get_teamPosition(i,j) == \"MIDDLE\":\n","        X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","        y.append(get_time_played(i,j) * 0.0001)\n","      if get_teamPosition(i,j) == \"JUNGLE\":\n","        X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","        y.append(get_time_played(i,j) * 0.0001)\n","      if get_teamPosition(i,j) == \"BOTTOM\":\n","        X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","        y.append(get_time_played(i,j) * 0.0001)\n","      if get_teamPosition(i,j) == \"UTILITY\":\n","        X.append([(get_totalDamageDealtToChampions(i,j)*0.0001) + (get_totalDamageTaken(i,j)*0.0001) + (get_damageDealtToTurrets(i,j)*0.0001) + get_kda(i,j)])\n","        y.append(get_time_played(i,j) * 0.0001)\n","      time.sleep(5)\n","      break"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"elapsed":7,"status":"error","timestamp":1660798515483,"user":{"displayName":"송기남","userId":"11259300127038951834"},"user_tz":-540},"id":"qyEcydsCBemA","outputId":"c2063943-a478-4bfc-f87b-3121598a56ec"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-21748169a65a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 선형회귀 모델 객체생성\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mregr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlinear_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLinearRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m#학습\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mregr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_A_D\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_A_D\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#직선의 기울기(가중치), correlation coefficient\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'linear_model' is not defined"]}],"source":["# 선형회귀 모델 객체생성\n","regr = linear_model.LinearRegression()\n","#학습\n","regr.fit(X_A_D, y_A_D)\n","#직선의 기울기(가중치), correlation coefficient\n","coef = regr.coef_\n","\n","#직선의 절편(절편) intercept\n","intercept = regr.intercept_\n","#학습된 직선이 데이터를 얼마나 잘 따르나,테스트&평가\n","score = regr.score(X_A_D,y_A_D)\n","# 학습데이터와 값을 산포도로 그린다\n","plt.figure(figsize=(7,5))\n","plt.scatter(X_A_D, y_A_D)\n","#plt.scatter(15,1 , color='r', marker=\"D\")\n","# 학습데이터를 입력으로 하여 예측값을 계산한다.\n"," #예측\n","y_pred = regr.predict(X_A_D)\n","print(coef)\n","print(intercept)\n","# 계산된 기울기와 y절편을 가지는 점선을 그려보자\n","plt.plot(X_A_D, y_pred,'r:')\n","plt.savefig(\"A_D__.png\")\n","plt.show()\n"]},{"cell_type":"code","source":["# 선형회귀 모델 객체생성\n","regr = linear_model.LinearRegression()\n","#학습\n","regr.fit(X_C_S, y_C_S)\n","#직선의 기울기(가중치), correlation coefficient\n","coef = regr.coef_\n","#직선의 절편(절편) intercept\n","intercept = regr.intercept_\n","#학습된 직선이 데이터를 얼마나 잘 따르나,테스트&평가\n","score = regr.score(X_C_S,y_C_S)\n","# 학습데이터와 값을 산포도로 그린다\n","plt.figure(figsize=(7,5))\n","plt.scatter(X_C_S, y_C_S)\n","#plt.scatter(15,1 , color='r', marker=\"D\")\n","# 학습데이터를 입력으로 하여 예측값을 계산한다.\n"," #예측\n","y_pred = regr.predict(X_C_S)\n","print(coef)\n","print(intercept)\n","# 계산된 기울기와 y절편을 가지는 점선을 그려보자\n","plt.plot(X_C_S, y_pred,'r:')\n","plt.savefig(\"C_S__.png\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"QgT-oh5XwdZc","executionInfo":{"status":"ok","timestamp":1660793080181,"user_tz":-540,"elapsed":935,"user":{"displayName":"강우협","userId":"04972175977086628088"}},"outputId":"157fd3ca-9067-4140-fbf6-d70904e74500"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.40742171]\n","9.273571763019241\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 504x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# 선형회귀 모델 객체생성\n","regr = linear_model.LinearRegression()\n","#학습\n","regr.fit(X_AD_S, y_AD_S)\n","#직선의 기울기(가중치), correlation coefficient\n","coef = regr.coef_\n","#직선의 절편(절편) intercept\n","intercept = regr.intercept_\n","#학습된 직선이 데이터를 얼마나 잘 따르나,테스트&평가\n","score = regr.score(X_AD_S,y_AD_S)\n","# 학습데이터와 값을 산포도로 그린다\n","plt.figure(figsize=(7,5))\n","plt.scatter(X_AD_S, y_AD_S)\n","#plt.scatter(15,1 , color='r', marker=\"D\")\n","# 학습데이터를 입력으로 하여 예측값을 계산한다.\n"," #예측\n","y_AD_S_pred = regr.predict(X_AD_S)\n","# 계산된 기울기와 y절편을 가지는 점선을 그려보자\n","plt.plot(X_AD_S, y_AD_S_pred,'r:')\n","#plt.savefig(\"A_D__.png\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"6zXy6bJLweV7","executionInfo":{"status":"ok","timestamp":1660759817746,"user_tz":-540,"elapsed":343,"user":{"displayName":"강우협","userId":"04972175977086628088"}},"outputId":"908286ef-ba24-4872-c159-5e38be33080a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 504x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# 선형회귀 모델 객체생성\n","regr = linear_model.LinearRegression()\n","#학습\n","regr.fit(X, y)\n","#직선의 기울기(가중치), correlation coefficient\n","coef = regr.coef_\n","#직선의 절편(절편) intercept\n","intercept = regr.intercept_\n","#학습된 직선이 데이터를 얼마나 잘 따르나,테스트&평가\n","score = regr.score(X,y)\n","# 학습데이터와 값을 산포도로 그린다\n","plt.figure(figsize=(7,5))\n","plt.scatter(X, y)\n","#plt.scatter(15,1 , color='r', marker=\"D\")\n","# 학습데이터를 입력으로 하여 예측값을 계산한다.\n"," #예측\n","y_pred = regr.predict(X)\n","# 계산된 기울기와 y절편을 가지는 점선을 그려보자\n","plt.plot(X, y_pred,'r:')\n","plt.savefig(\"A_D__.png\")\n","plt.show()\n"],"metadata":{"id":"EvK-l3hHwfAb"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20647,"status":"ok","timestamp":1660637977677,"user":{"displayName":"강우협","userId":"04972175977086628088"},"user_tz":-540},"id":"hZsr29yzAkYZ","outputId":"9cdd0937-d8e8-4319-b818-71cf763e2bd3"},"outputs":[{"output_type":"stream","name":"stdout","text":["KDA :  2.78\n","포탑에 가한 피해량 :  1518\n","챔피언에게 준 피해량 :  21648\n","받은 피해량 :  19124\n","포지션 :  \n","와드 박은수 :  0\n","와드 부순수 :  0\n","획득한 골드량 :  13227\n","시야점수 :  0\n","미니언 처치 수 :  39\n","챔피언 이름 :  Draven\n","\n"]}],"source":["a = summoner_v4_by_summoner_name(\"삼성갤럭시노트8\")[\"puuid\"] #소환사 고유코드(puuid) 받기\n","for i in match_v5_get_list_match_id(a,0,1):\n","    for j in range(10):\n","      if match_v5_get_match_history(i)[\"info\"][\"participants\"][j][\"summonerName\"] == \"삼성갤럭시노트8\":\n","        time.sleep(5)\n","        print(\"KDA : \", get_kda(i,j)) # KDA\n","        print(\"포탑에 가한 피해량 : \", get_damageDealtToTurrets(i,j)) #포탑에 가한 피해량\n","        print(\"챔피언에게 준 피해량 : \", get_totalDamageDealtToChampions(i,j)) #챔피언에게 준 피해량\n","        print(\"받은 피해량 : \", get_totalDamageTaken(i,j)) #받은 피해량\n","        print(\"포지션 : \", get_teamPosition(i,j)) #포지션\n","        print(\"와드 박은수 : \", get_wardsPlaced(i,j)) #와드 박은수\n","        print(\"와드 부순수 : \", get_wardsKilled(i,j)) #와드 부순수\n","        print(\"획득한 골드량 : \", get_goldEarned(i,j)) #획득 한 골드량\n","        print(\"시야점수 : \", get_visionScore(i,j)) #시야점수\n","        print(\"미니언 처치 수 : \", get_totalMinionsKilled(i,j)) # 미니언 처치 수\n","        print(\"챔피언 이름 : \", get_championName(i,j)) #챔피언 이름\n","        print()\n","        time.sleep(5)\n","        break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v_AbJ8g35NCh"},"outputs":[],"source":["a = summoner_v4_by_summoner_name(\"삼성갤럭시노트8\")[\"puuid\"] #소환사 고유코드(puuid) 받기\n","for i in match_v5_get_list_match_id(a,0,1):\n","  pp.pprint(match_v5_get_match_history(i)[\"info\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ky7pVwBG5jc7"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vsHHUnyWlyV3"},"outputs":[],"source":["challenger_name = []\n","for i in league_v4_queue_tier_division(\"solo\",\"CHALLENGER\",1,1):\n","  challenger_name.append(i['summonerName'])\n","\n","for i in challenger_name:\n","  summoner_v4_by_summoner_name(i)\n","  time.sleep(2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jisbAQrzlpAO"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"psIpRBK-sULI"},"outputs":[],"source":["def get_winrate(queue,tier,division,page):\n","  challengers_summoner_id = []\n","  challengers_data = []\n","  challengers_wins = 0\n","  challengers_losses = 0\n","  count = 0\n","  # 챌린저 SummonerId 가져오기\n","  for i in league_v4_queue_tier_division(queue,tier,division,page):\n","    challengers_summoner_id.append(i[\"summonerId\"])\n","  # 챌린저 SummonerId로 데이터 가져오기 (승/패)\n","  for i in challengers_summoner_id:\n","    challengers_data.append(SummonerId(i))\n","    time.sleep(1)\n","  for i in challengers_data:\n","    challengers_wins += i[count][\"wins\"]\n","    challengers_losses += i[count][\"losses\"]\n","    count += 1\n","  return (challengers_losses / (challengers_wins + challengers_losses)) * 100\n","print(get_winrate(\"solo\",\"CHALLENGER\",1,1))\n","  # 승률 구하기\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vitsLgT9UnzY"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1nCmP9rwQ4a4fAHCw7JCTaojlfPW4tjfN","timestamp":1660798485176}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}